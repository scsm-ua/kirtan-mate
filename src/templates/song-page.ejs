<!doctype html>

<html lang="<%= language %>">
    <head>
        <%- headParts %>

        <link rel="stylesheet" href="<%= paths.toCss %>/index.css" />
        <link rel="stylesheet" href="<%= paths.toCss %>/song-page.css" />
        <link rel="stylesheet" href="<%= paths.toCss %>/partials/song-embed.css" />
        <link rel="stylesheet" href="<%= paths.toCss %>/partials/song-verse.css" />

        <% if (embeds && embeds.length) { %>
            <script src="https://w.soundcloud.com/player/api.js"></script>
        <% } %>

        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tingle/0.16.0/tingle.min.css" integrity="sha512-b+T2i3P45i1LZM7I00Ci5QquB9szqaxu+uuk5TUSGjZQ4w4n+qujQiIuvTv2BxE7WCGQCifNMksyKILDiHzsOg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/tingle/0.16.0/tingle.min.js" integrity="sha512-2B9/byNV1KKRm5nQ2RLViPFD6U4dUjDGwuW1GU+ImJh8YinPU9Zlq1GzdTMO+G2ROrB5o1qasJBy1ttYz0wCug==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script src="<%= paths.toJs %>/user-choice.js"></script>
    </head>

    <body>
        <div class="Layout">
            <div class="Layout__content">
                <%- include(paths.toPartials + '/header.ejs'); %>

                <main class="Main SongPage">
                    <div class="Main__container SongPage__container">
                        <div class="SongPage__content">
                            <%- include(paths.toPartials + '/song-header.ejs'); %>

                            <main class="SongPage__main">
                                <% if (song.getVersesForWeb().length) { %>
                                    <div class="SongPage__toggle">
                                        <three-mode-switch
                                            label="<%= currentSongbook.i18n('SONG_PAGE.SHOW_TRANSLATION') %>"
                                        ></three-mode-switch>
                                    </div>

                                    <ul class="SongPage__verses <% if (has_word_by_word) { %>word-by-word-mode"<% } %>>
                                        <% song.getVersesForWeb().forEach((item, idx, arr) => { %>
                                            <%- include(
                                                paths.toPartials + '/song-verse.ejs',
                                                { 'item': item, 'verses': arr }
                                            ); %>
                                        <% }) %>
                                    </ul>
                                <% } %>
                            </main>

                            <% if (embeds && embeds.length) { %>
                                <section class="SongPage__extra">
                                    <ul class="SongPage__verses">
                                        <% embeds && embeds.length && embeds.forEach(item => { %>
                                            <%- include(
                                            paths.toPartials + '/song-embed.ejs',
                                            { 'item': item }
                                            ); %>
                                        <% }) %>
                                    </ul>
                                </section>
                            <% } %>
                        </div>
                    </div>

                    <%- include(paths.toPartials + '/prev-next-nav.ejs'); %>
                </main>
            </div>

            <%- include(paths.toPartials + '/footer.ejs'); %>
        </div>

        <script
                src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"
                integrity="sha512-CNgIRecGo7nphbeZ04Sc13ka07paqdeTu0WR1IM4kNcpmBAUSHSQX0FslNhTDadL4O5SAGapGt4FodqL8My0mA=="
                crossorigin="anonymous"
                referrerpolicy="no-referrer"
        ></script>

        <script>
            (function() {
                /**
                 * Show modal window with share function.
                 */
                /**
                 * Modal window setup.
                 */
                const btn = document.getElementById('share-button');
                btn.onclick = () => modal.open();

                const modal = new tingle.modal({
                    footer: false,
                    stickyFooter: false,
                    closeMethods: ['overlay', 'button', 'escape'],
                    cssClass: ['AppModal']
                });

                modal.setContent(`<%- include(paths.toPartials + "/song-share.ejs"); %>`);

                /**
                 * Share the URL.
                 */
                const href = window.location.href;
                const telegraph_href = '<%= telegraph_href || '' %>';
                const input = document.getElementById('href-input');
                const tgInput = document.getElementById('tg-href-input');
                const copyButton = document.getElementById('copy-button');
                const tgCopyButton = document.getElementById('tg-copy-button');
                const tgCopyBox = document.querySelector('.SongShare__copy-tg');

                if (telegraph_href) {
                    tgCopyBox.style.display = 'block';
                }

                input.value = href;
                tgInput.value = telegraph_href;

                input.addEventListener('click', () => {
                    input.select();
                });
                tgInput.addEventListener('click', () => {
                    tgInput.select();
                });

                copyButton.addEventListener('click', () => {
                    navigator.clipboard.writeText(href).catch(window.console.error);
                    setTimeout(() => modal.close(), 300);
                });

                tgCopyButton.addEventListener('click', () => {
                    navigator.clipboard.writeText(telegraph_href).catch(window.console.error);
                    setTimeout(() => modal.close(), 300);
                });

                const qr = document.getElementById('qrcode-block');
                new QRCode(qr, {
                    text: href,
                    width: 240,
                    height: 240
                });
            } ())
        </script>

        <script>
            /**
             * Collapse-expand embedded audio frame. Make it auto-play on expand.
             */
            (function() {
                const embeds = document.querySelectorAll('[data-embed]');

                embeds.forEach((elem) => {
                    const frameContainer = elem.parentNode.querySelector('.Collapse');

                    elem.addEventListener('click', () => {
                        const isShown = frameContainer.classList.contains('Collapse__show');
                        const iFrame = elem.parentNode.querySelector('iframe');
                        const player = SC.Widget(iFrame);

                        elem.classList.toggle('show');
                        frameContainer.classList.toggle('Collapse__show');

                        player.bind(SC.Widget.Events.READY, () =>
                            isShown ? player.pause() : player.play()
                        );
                    });
                });
            })();
        </script>

        <script>
            /**
             * Show modal window with translation variations.
             */
            (function () {
                const btn = document.getElementById('variants-button');
                btn.onclick = () => modal.open();

                const modal = new tingle.modal({
                    footer: false,
                    stickyFooter: false,
                    closeMethods: ['overlay', 'button', 'escape'],
                    cssClass: ['AppModal']
                });

                modal.setContent(`<%- include(paths.toPartials + "/song-translations.ejs"); %>`);
            }) ();
        </script>

        <script>
            /**
             * Declaration of the three-way-switch Web component.
             */
            const tpl = document.createElement('template');
            tpl.innerHTML = `
                <style>
                  :host { display: inline-flex; align-items: center; font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; }
                  .wrap { display: inline-flex; align-items: center; gap: 0.6rem; user-select: none; -webkit-user-select: none; }

                  .pill { --pill-h: 36px; --pill-w: 82px; --pad:6px; position:relative; width: var(--pill-w); height: var(--pill-h); box-sizing: border-box; display: inline-flex; align-items: center; padding: var(--pad); background: rgba(0,0,0,0.06); border-radius: 999px; gap: 6px; cursor: pointer; }

                  /* selection fill that animates */
                  .fill { --pill-color: #aa8811; position:absolute; top:4px; bottom: 3px; left:4px; width: calc(50% - 8px); border-radius: 999px; transition: transform 260ms cubic-bezier(.2,.9,.2,1), width 260ms cubic-bezier(.2,.9,.2,1), left 260ms cubic-bezier(.2,.9,.2,1); box-shadow: 0 1px 6px rgba(0,0,0,0.08); }

                  /* When both selected we stretch the fill */
                  :host([color]) .fill { background: var(--accent-color); }
                  :host(:not([color])) .fill { background: var(--accent-color); }

                  .slot { position:relative; z-index:2; width:50%; display:inline-flex; justify-content:center; align-items:center; }
                  .dot { width:28px; height:28px; border-radius:50%; display:inline-grid; place-items:center; font-weight:600; font-size:13px; background:transparent; z-index:2; }
                  .label-text { margin-left:0; font-size:14px; color: rgb(108, 108, 108); cursor: pointer; user-select:none; -webkit-user-select:none; }

                  /* Visuals when inactive to keep contrast */
                  .dot span { pointer-events:none; }

                  /* Balanced vertical alignment */
                  .pill, .dot { display:flex; align-items:center; justify-content:center; }

                  /* Accessible focus outlines */
                  .pill:focus-visible { outline: 2px solid rgba(59,130,246,0.25); outline-offset:4px; }

                  /* state classes applied on host for styling convenience */
                  :host([mode="1"]) .fill { left:4px; width:calc(50% - 8px); transform: translateX(0); }
                  :host([mode="2"]) .fill { left:calc(50% + 4px); width:calc(50% - 8px); transform: translateX(0); }
                  :host([mode="3"]) .fill { left:4px; width:calc(100% - 8px); transform: translateX(0); }

                  /* label color when active/inactive */
                  :host([mode="1"]) .dot.left { color: white; }
                  :host([mode="2"]) .dot.right { color: white; }
                  :host([mode="3"]) .dot.left, :host([mode="3"]) .dot.right { color: white; }

                  /* Keep the dots readable over the fill by using mix-blend or forced color */
                  .dot { color: #111827; }
                  :host([mode="1"]) .dot.left, :host([mode="2"]) .dot.right, :host([mode="3"]) .dot { color: white; }

                  /* subtle borders to keep shape on light background */
                  .pill { border:1px solid rgba(15,23,42,0.04); }
                  .icon { display: inline-block; background-color: var(--title-color); transition: background-color 0.35s; position: relative; }
                  .icon.left {
                    -webkit-mask: url('<%= paths.toImages %>/svg/devanagari-letter-a.svg') no-repeat center / contain;
                    mask: url('<%= paths.toImages %>/svg/devanagari-letter-a.svg') no-repeat center / contain;
                    top: 3px; left: -2px; width: 15px; height: 15px;
                  }
                  .icon.right {
                    -webkit-mask: url('<%= paths.toImages %>/svg/letter-aa.svg') no-repeat center / contain;
                    mask: url('<%= paths.toImages %>/svg/letter-aa.svg') no-repeat center / contain;
                    top: 2px; left: 1px; width: 24px; height: 24px;
                  }
                  :host([mode="1"]) .icon.left { background-color: var(--song-bg-color); }
                  :host([mode="2"]) .icon.right { background-color: var(--song-bg-color); }
                  :host([mode="3"]) .icon.left, :host([mode="3"]) .icon.right { background-color: var(--song-bg-color); }
                </style>

                <span class="wrap">
                  <span class="pill" tabindex="0" role="group" aria-label="three-mode-pill">
                    <span class="fill"></span>

                    <span class="slot left">
                      <span class="dot left">
                        <span class="left-label">
                          <span class='icon left'></span>
                        </span>
                      </span>
                    </span>

                    <span class="slot right">
                      <span class="dot right">
                        <span class="right-label">
                          <span class='icon right'></span>
                        </span>
                      </span>
                    </span>
                  </span>

                  <span class="label-text"></span>
                </span>
              `;

            /**
             *
             */
            class ThreeModeSwitch extends HTMLElement {
                static EVENT_NAME = 'switch_change';

                constructor() {
                    super();
                    this._shadow = this.attachShadow({ mode: 'open' });
                    this._shadow.appendChild(tpl.content.cloneNode(true));

                    this.mode = getSongDisplayMode() || 3;
                    this.$labelText = this._shadow.querySelector('.label-text');
                }

                /**/
                connectedCallback() {
                    const leftSlot = this._shadow.querySelector('.slot.left');
                    const rightSlot = this._shadow.querySelector('.slot.right');
                    leftSlot.addEventListener('click', this._onLeftClick);
                    rightSlot.addEventListener('click', this._onRightClick);

                    this.$labelText.textContent = this.getAttribute('label') || '...';
                    this.$labelText.addEventListener('click', this._onLeftClick);

                    this.style.webkitUserSelect = 'none';
                    this._render();
                }

                /**/
                _render() {
                    this.setAttribute('mode', String(this.mode));
                }

                /**/
                _emitChange() {
                    this.dispatchEvent(
                        new CustomEvent(ThreeModeSwitch.EVENT_NAME, {
                            detail: { value: this.mode },
                            bubbles: true,
                            composed: true
                        })
                    );
                }

                /**/
                _onLeftClick = (e) => {
                    if (this.mode === 2) this.mode = 3;
                    else if (this.mode === 3) this.mode = 1;
                    else this.mode = 2;

                    this._render();
                    this._emitChange();
                };

                /**/
                _onRightClick = (e) => {
                    if (this.mode === 1) this.mode = 3;
                    else if (this.mode === 3) this.mode = 2;
                    else this.mode = 1;

                    this._render();
                    this._emitChange();
                };
            }

            /**/
            customElements.define('three-mode-switch', ThreeModeSwitch);

            /**
             * Collapse-expand verses / translations.
             */
            (function () {
                const translations = [...document.querySelectorAll('[data-elem="translation"]')];
                const wordByWord = [...document.querySelectorAll('[data-elem="wordByWord"]')];
                const verses = [...document.querySelectorAll('[data-elem="verse"]')];

                function toggle(targets, shouldShow) {
                    const method = shouldShow ? 'add' : 'remove';
                    targets.forEach((t) => t.classList[method]('Collapse__show'));
                }

                function performUpdate(mode) {
                    if (mode === 1) {
                        toggle(verses, true);
                        toggle(wordByWord, false);
                        toggle(translations, false);
                    } else if (mode === 2) {
                        toggle(verses, false);
                        toggle(wordByWord, false);
                        toggle(translations, true);
                    } else {
                        toggle(verses, true);
                        toggle(wordByWord, true);
                        toggle(translations, true);
                    }
                }

                document.addEventListener(ThreeModeSwitch.EVENT_NAME, ({ detail }) => {
                    performUpdate(detail.value);
                    setSongDisplayMode(detail.value);
                });

                performUpdate(getSongDisplayMode());

                // setTimeout(() => {
                //     [...document.querySelectorAll('.Collapse')]
                //         .forEach((v) => v.classList.add('Collapse__transition'));
                // });

                // (function enableCollapseAnimation() {
                //
                // })();
            })();
        </script>

        <%- include(paths.toPartials + '/gtag.ejs'); %>
    </body>
</html>
